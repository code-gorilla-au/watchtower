// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package watchtower

import (
	"github.com/code-gorilla-au/go-toolbox/github"
	"sync"
)

// Ensure, that ghClientMock does implement ghClient.
// If this is not the case, regenerate this file with moq.
var _ ghClient = &ghClientMock{}

// ghClientMock is a mock implementation of ghClient.
//
//	func TestSomethingThatUsesghClient(t *testing.T) {
//
//		// make and configure a mocked ghClient
//		mockedghClient := &ghClientMock{
//			GetRepoDetailsFunc: func(owner string, repo string, token string) (github.QueryRepository, error) {
//				panic("mock out the GetRepoDetails method")
//			},
//			SearchReposFunc: func(owner string, topic string, token string) (github.QuerySearch[github.Repository], error) {
//				panic("mock out the SearchRepos method")
//			},
//		}
//
//		// use mockedghClient in code that requires ghClient
//		// and then make assertions.
//
//	}
type ghClientMock struct {
	// GetRepoDetailsFunc mocks the GetRepoDetails method.
	GetRepoDetailsFunc func(owner string, repo string, token string) (github.QueryRepository, error)

	// SearchReposFunc mocks the SearchRepos method.
	SearchReposFunc func(owner string, topic string, token string) (github.QuerySearch[github.Repository], error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRepoDetails holds details about calls to the GetRepoDetails method.
		GetRepoDetails []struct {
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
			// Token is the token argument value.
			Token string
		}
		// SearchRepos holds details about calls to the SearchRepos method.
		SearchRepos []struct {
			// Owner is the owner argument value.
			Owner string
			// Topic is the topic argument value.
			Topic string
			// Token is the token argument value.
			Token string
		}
	}
	lockGetRepoDetails sync.RWMutex
	lockSearchRepos    sync.RWMutex
}

// GetRepoDetails calls GetRepoDetailsFunc.
func (mock *ghClientMock) GetRepoDetails(owner string, repo string, token string) (github.QueryRepository, error) {
	callInfo := struct {
		Owner string
		Repo  string
		Token string
	}{
		Owner: owner,
		Repo:  repo,
		Token: token,
	}
	mock.lockGetRepoDetails.Lock()
	mock.calls.GetRepoDetails = append(mock.calls.GetRepoDetails, callInfo)
	mock.lockGetRepoDetails.Unlock()
	if mock.GetRepoDetailsFunc == nil {
		var (
			queryRepositoryOut github.QueryRepository
			errOut             error
		)
		return queryRepositoryOut, errOut
	}
	return mock.GetRepoDetailsFunc(owner, repo, token)
}

// GetRepoDetailsCalls gets all the calls that were made to GetRepoDetails.
// Check the length with:
//
//	len(mockedghClient.GetRepoDetailsCalls())
func (mock *ghClientMock) GetRepoDetailsCalls() []struct {
	Owner string
	Repo  string
	Token string
} {
	var calls []struct {
		Owner string
		Repo  string
		Token string
	}
	mock.lockGetRepoDetails.RLock()
	calls = mock.calls.GetRepoDetails
	mock.lockGetRepoDetails.RUnlock()
	return calls
}

// SearchRepos calls SearchReposFunc.
func (mock *ghClientMock) SearchRepos(owner string, topic string, token string) (github.QuerySearch[github.Repository], error) {
	callInfo := struct {
		Owner string
		Topic string
		Token string
	}{
		Owner: owner,
		Topic: topic,
		Token: token,
	}
	mock.lockSearchRepos.Lock()
	mock.calls.SearchRepos = append(mock.calls.SearchRepos, callInfo)
	mock.lockSearchRepos.Unlock()
	if mock.SearchReposFunc == nil {
		var (
			querySearchOut github.QuerySearch[github.Repository]
			errOut         error
		)
		return querySearchOut, errOut
	}
	return mock.SearchReposFunc(owner, topic, token)
}

// SearchReposCalls gets all the calls that were made to SearchRepos.
// Check the length with:
//
//	len(mockedghClient.SearchReposCalls())
func (mock *ghClientMock) SearchReposCalls() []struct {
	Owner string
	Topic string
	Token string
} {
	var calls []struct {
		Owner string
		Topic string
		Token string
	}
	mock.lockSearchRepos.RLock()
	calls = mock.calls.SearchRepos
	mock.lockSearchRepos.RUnlock()
	return calls
}
