// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package watchtower

import (
	"context"
	"database/sql"
	"sync"
	"watchtower/internal/database"
	"watchtower/internal/github"
)

// Ensure, that ghClientMock does implement ghClient.
// If this is not the case, regenerate this file with moq.
var _ ghClient = &ghClientMock{}

// ghClientMock is a mock implementation of ghClient.
//
//	func TestSomethingThatUsesghClient(t *testing.T) {
//
//		// make and configure a mocked ghClient
//		mockedghClient := &ghClientMock{
//			GetRepoDetailsFunc: func(owner string, repo string, token string) (github.QueryRepository, error) {
//				panic("mock out the GetRepoDetails method")
//			},
//			SearchReposFunc: func(owner string, topic string, token string) (github.QuerySearch[github.Repository], error) {
//				panic("mock out the SearchRepos method")
//			},
//		}
//
//		// use mockedghClient in code that requires ghClient
//		// and then make assertions.
//
//	}
type ghClientMock struct {
	// GetRepoDetailsFunc mocks the GetRepoDetails method.
	GetRepoDetailsFunc func(owner string, repo string, token string) (github.QueryRepository, error)

	// SearchReposFunc mocks the SearchRepos method.
	SearchReposFunc func(owner string, topic string, token string) (github.QuerySearch[github.Repository], error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRepoDetails holds details about calls to the GetRepoDetails method.
		GetRepoDetails []struct {
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
			// Token is the token argument value.
			Token string
		}
		// SearchRepos holds details about calls to the SearchRepos method.
		SearchRepos []struct {
			// Owner is the owner argument value.
			Owner string
			// Topic is the topic argument value.
			Topic string
			// Token is the token argument value.
			Token string
		}
	}
	lockGetRepoDetails sync.RWMutex
	lockSearchRepos    sync.RWMutex
}

// GetRepoDetails calls GetRepoDetailsFunc.
func (mock *ghClientMock) GetRepoDetails(owner string, repo string, token string) (github.QueryRepository, error) {
	callInfo := struct {
		Owner string
		Repo  string
		Token string
	}{
		Owner: owner,
		Repo:  repo,
		Token: token,
	}
	mock.lockGetRepoDetails.Lock()
	mock.calls.GetRepoDetails = append(mock.calls.GetRepoDetails, callInfo)
	mock.lockGetRepoDetails.Unlock()
	if mock.GetRepoDetailsFunc == nil {
		var (
			queryRepositoryOut github.QueryRepository
			errOut             error
		)
		return queryRepositoryOut, errOut
	}
	return mock.GetRepoDetailsFunc(owner, repo, token)
}

// GetRepoDetailsCalls gets all the calls that were made to GetRepoDetails.
// Check the length with:
//
//	len(mockedghClient.GetRepoDetailsCalls())
func (mock *ghClientMock) GetRepoDetailsCalls() []struct {
	Owner string
	Repo  string
	Token string
} {
	var calls []struct {
		Owner string
		Repo  string
		Token string
	}
	mock.lockGetRepoDetails.RLock()
	calls = mock.calls.GetRepoDetails
	mock.lockGetRepoDetails.RUnlock()
	return calls
}

// SearchRepos calls SearchReposFunc.
func (mock *ghClientMock) SearchRepos(owner string, topic string, token string) (github.QuerySearch[github.Repository], error) {
	callInfo := struct {
		Owner string
		Topic string
		Token string
	}{
		Owner: owner,
		Topic: topic,
		Token: token,
	}
	mock.lockSearchRepos.Lock()
	mock.calls.SearchRepos = append(mock.calls.SearchRepos, callInfo)
	mock.lockSearchRepos.Unlock()
	if mock.SearchReposFunc == nil {
		var (
			querySearchOut github.QuerySearch[github.Repository]
			errOut         error
		)
		return querySearchOut, errOut
	}
	return mock.SearchReposFunc(owner, topic, token)
}

// SearchReposCalls gets all the calls that were made to SearchRepos.
// Check the length with:
//
//	len(mockedghClient.SearchReposCalls())
func (mock *ghClientMock) SearchReposCalls() []struct {
	Owner string
	Topic string
	Token string
} {
	var calls []struct {
		Owner string
		Topic string
		Token string
	}
	mock.lockSearchRepos.RLock()
	calls = mock.calls.SearchRepos
	mock.lockSearchRepos.RUnlock()
	return calls
}

// Ensure, that RepoStoreMock does implement RepoStore.
// If this is not the case, regenerate this file with moq.
var _ RepoStore = &RepoStoreMock{}

// RepoStoreMock is a mock implementation of RepoStore.
//
//	func TestSomethingThatUsesRepoStore(t *testing.T) {
//
//		// make and configure a mocked RepoStore
//		mockedRepoStore := &RepoStoreMock{
//			CreatePullRequestFunc: func(ctx context.Context, arg database.CreatePullRequestParams) (database.PullRequest, error) {
//				panic("mock out the CreatePullRequest method")
//			},
//			CreateRepoFunc: func(ctx context.Context, arg database.CreateRepoParams) (database.Repository, error) {
//				panic("mock out the CreateRepo method")
//			},
//			CreateSecurityFunc: func(ctx context.Context, arg database.CreateSecurityParams) (database.Security, error) {
//				panic("mock out the CreateSecurity method")
//			},
//			GetPullRequestByProductIDAndStateFunc: func(ctx context.Context, arg database.GetPullRequestByProductIDAndStateParams) ([]database.PullRequest, error) {
//				panic("mock out the GetPullRequestByProductIDAndState method")
//			},
//			GetPullRequestsByOrganisationAndStateFunc: func(ctx context.Context, arg database.GetPullRequestsByOrganisationAndStateParams) ([]database.PullRequest, error) {
//				panic("mock out the GetPullRequestsByOrganisationAndState method")
//			},
//			GetReposByProductIDFunc: func(ctx context.Context, productID int64) ([]database.Repository, error) {
//				panic("mock out the GetReposByProductID method")
//			},
//			GetSecurityByOrganisationAndStateFunc: func(ctx context.Context, arg database.GetSecurityByOrganisationAndStateParams) ([]database.Security, error) {
//				panic("mock out the GetSecurityByOrganisationAndState method")
//			},
//			GetSecurityByProductIDAndStateFunc: func(ctx context.Context, arg database.GetSecurityByProductIDAndStateParams) ([]database.Security, error) {
//				panic("mock out the GetSecurityByProductIDAndState method")
//			},
//		}
//
//		// use mockedRepoStore in code that requires RepoStore
//		// and then make assertions.
//
//	}
type RepoStoreMock struct {
	// CreatePullRequestFunc mocks the CreatePullRequest method.
	CreatePullRequestFunc func(ctx context.Context, arg database.CreatePullRequestParams) (database.PullRequest, error)

	// CreateRepoFunc mocks the CreateRepo method.
	CreateRepoFunc func(ctx context.Context, arg database.CreateRepoParams) (database.Repository, error)

	// CreateSecurityFunc mocks the CreateSecurity method.
	CreateSecurityFunc func(ctx context.Context, arg database.CreateSecurityParams) (database.Security, error)

	// GetPullRequestByProductIDAndStateFunc mocks the GetPullRequestByProductIDAndState method.
	GetPullRequestByProductIDAndStateFunc func(ctx context.Context, arg database.GetPullRequestByProductIDAndStateParams) ([]database.PullRequest, error)

	// GetPullRequestsByOrganisationAndStateFunc mocks the GetPullRequestsByOrganisationAndState method.
	GetPullRequestsByOrganisationAndStateFunc func(ctx context.Context, arg database.GetPullRequestsByOrganisationAndStateParams) ([]database.PullRequest, error)

	// GetReposByProductIDFunc mocks the GetReposByProductID method.
	GetReposByProductIDFunc func(ctx context.Context, productID int64) ([]database.Repository, error)

	// GetSecurityByOrganisationAndStateFunc mocks the GetSecurityByOrganisationAndState method.
	GetSecurityByOrganisationAndStateFunc func(ctx context.Context, arg database.GetSecurityByOrganisationAndStateParams) ([]database.Security, error)

	// GetSecurityByProductIDAndStateFunc mocks the GetSecurityByProductIDAndState method.
	GetSecurityByProductIDAndStateFunc func(ctx context.Context, arg database.GetSecurityByProductIDAndStateParams) ([]database.Security, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreatePullRequest holds details about calls to the CreatePullRequest method.
		CreatePullRequest []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.CreatePullRequestParams
		}
		// CreateRepo holds details about calls to the CreateRepo method.
		CreateRepo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.CreateRepoParams
		}
		// CreateSecurity holds details about calls to the CreateSecurity method.
		CreateSecurity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.CreateSecurityParams
		}
		// GetPullRequestByProductIDAndState holds details about calls to the GetPullRequestByProductIDAndState method.
		GetPullRequestByProductIDAndState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.GetPullRequestByProductIDAndStateParams
		}
		// GetPullRequestsByOrganisationAndState holds details about calls to the GetPullRequestsByOrganisationAndState method.
		GetPullRequestsByOrganisationAndState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.GetPullRequestsByOrganisationAndStateParams
		}
		// GetReposByProductID holds details about calls to the GetReposByProductID method.
		GetReposByProductID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID int64
		}
		// GetSecurityByOrganisationAndState holds details about calls to the GetSecurityByOrganisationAndState method.
		GetSecurityByOrganisationAndState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.GetSecurityByOrganisationAndStateParams
		}
		// GetSecurityByProductIDAndState holds details about calls to the GetSecurityByProductIDAndState method.
		GetSecurityByProductIDAndState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.GetSecurityByProductIDAndStateParams
		}
	}
	lockCreatePullRequest                     sync.RWMutex
	lockCreateRepo                            sync.RWMutex
	lockCreateSecurity                        sync.RWMutex
	lockGetPullRequestByProductIDAndState     sync.RWMutex
	lockGetPullRequestsByOrganisationAndState sync.RWMutex
	lockGetReposByProductID                   sync.RWMutex
	lockGetSecurityByOrganisationAndState     sync.RWMutex
	lockGetSecurityByProductIDAndState        sync.RWMutex
}

// CreatePullRequest calls CreatePullRequestFunc.
func (mock *RepoStoreMock) CreatePullRequest(ctx context.Context, arg database.CreatePullRequestParams) (database.PullRequest, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.CreatePullRequestParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreatePullRequest.Lock()
	mock.calls.CreatePullRequest = append(mock.calls.CreatePullRequest, callInfo)
	mock.lockCreatePullRequest.Unlock()
	if mock.CreatePullRequestFunc == nil {
		var (
			pullRequestOut database.PullRequest
			errOut         error
		)
		return pullRequestOut, errOut
	}
	return mock.CreatePullRequestFunc(ctx, arg)
}

// CreatePullRequestCalls gets all the calls that were made to CreatePullRequest.
// Check the length with:
//
//	len(mockedRepoStore.CreatePullRequestCalls())
func (mock *RepoStoreMock) CreatePullRequestCalls() []struct {
	Ctx context.Context
	Arg database.CreatePullRequestParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.CreatePullRequestParams
	}
	mock.lockCreatePullRequest.RLock()
	calls = mock.calls.CreatePullRequest
	mock.lockCreatePullRequest.RUnlock()
	return calls
}

// CreateRepo calls CreateRepoFunc.
func (mock *RepoStoreMock) CreateRepo(ctx context.Context, arg database.CreateRepoParams) (database.Repository, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.CreateRepoParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateRepo.Lock()
	mock.calls.CreateRepo = append(mock.calls.CreateRepo, callInfo)
	mock.lockCreateRepo.Unlock()
	if mock.CreateRepoFunc == nil {
		var (
			repositoryOut database.Repository
			errOut        error
		)
		return repositoryOut, errOut
	}
	return mock.CreateRepoFunc(ctx, arg)
}

// CreateRepoCalls gets all the calls that were made to CreateRepo.
// Check the length with:
//
//	len(mockedRepoStore.CreateRepoCalls())
func (mock *RepoStoreMock) CreateRepoCalls() []struct {
	Ctx context.Context
	Arg database.CreateRepoParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.CreateRepoParams
	}
	mock.lockCreateRepo.RLock()
	calls = mock.calls.CreateRepo
	mock.lockCreateRepo.RUnlock()
	return calls
}

// CreateSecurity calls CreateSecurityFunc.
func (mock *RepoStoreMock) CreateSecurity(ctx context.Context, arg database.CreateSecurityParams) (database.Security, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.CreateSecurityParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateSecurity.Lock()
	mock.calls.CreateSecurity = append(mock.calls.CreateSecurity, callInfo)
	mock.lockCreateSecurity.Unlock()
	if mock.CreateSecurityFunc == nil {
		var (
			securityOut database.Security
			errOut      error
		)
		return securityOut, errOut
	}
	return mock.CreateSecurityFunc(ctx, arg)
}

// CreateSecurityCalls gets all the calls that were made to CreateSecurity.
// Check the length with:
//
//	len(mockedRepoStore.CreateSecurityCalls())
func (mock *RepoStoreMock) CreateSecurityCalls() []struct {
	Ctx context.Context
	Arg database.CreateSecurityParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.CreateSecurityParams
	}
	mock.lockCreateSecurity.RLock()
	calls = mock.calls.CreateSecurity
	mock.lockCreateSecurity.RUnlock()
	return calls
}

// GetPullRequestByProductIDAndState calls GetPullRequestByProductIDAndStateFunc.
func (mock *RepoStoreMock) GetPullRequestByProductIDAndState(ctx context.Context, arg database.GetPullRequestByProductIDAndStateParams) ([]database.PullRequest, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.GetPullRequestByProductIDAndStateParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockGetPullRequestByProductIDAndState.Lock()
	mock.calls.GetPullRequestByProductIDAndState = append(mock.calls.GetPullRequestByProductIDAndState, callInfo)
	mock.lockGetPullRequestByProductIDAndState.Unlock()
	if mock.GetPullRequestByProductIDAndStateFunc == nil {
		var (
			pullRequestsOut []database.PullRequest
			errOut          error
		)
		return pullRequestsOut, errOut
	}
	return mock.GetPullRequestByProductIDAndStateFunc(ctx, arg)
}

// GetPullRequestByProductIDAndStateCalls gets all the calls that were made to GetPullRequestByProductIDAndState.
// Check the length with:
//
//	len(mockedRepoStore.GetPullRequestByProductIDAndStateCalls())
func (mock *RepoStoreMock) GetPullRequestByProductIDAndStateCalls() []struct {
	Ctx context.Context
	Arg database.GetPullRequestByProductIDAndStateParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.GetPullRequestByProductIDAndStateParams
	}
	mock.lockGetPullRequestByProductIDAndState.RLock()
	calls = mock.calls.GetPullRequestByProductIDAndState
	mock.lockGetPullRequestByProductIDAndState.RUnlock()
	return calls
}

// GetPullRequestsByOrganisationAndState calls GetPullRequestsByOrganisationAndStateFunc.
func (mock *RepoStoreMock) GetPullRequestsByOrganisationAndState(ctx context.Context, arg database.GetPullRequestsByOrganisationAndStateParams) ([]database.PullRequest, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.GetPullRequestsByOrganisationAndStateParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockGetPullRequestsByOrganisationAndState.Lock()
	mock.calls.GetPullRequestsByOrganisationAndState = append(mock.calls.GetPullRequestsByOrganisationAndState, callInfo)
	mock.lockGetPullRequestsByOrganisationAndState.Unlock()
	if mock.GetPullRequestsByOrganisationAndStateFunc == nil {
		var (
			pullRequestsOut []database.PullRequest
			errOut          error
		)
		return pullRequestsOut, errOut
	}
	return mock.GetPullRequestsByOrganisationAndStateFunc(ctx, arg)
}

// GetPullRequestsByOrganisationAndStateCalls gets all the calls that were made to GetPullRequestsByOrganisationAndState.
// Check the length with:
//
//	len(mockedRepoStore.GetPullRequestsByOrganisationAndStateCalls())
func (mock *RepoStoreMock) GetPullRequestsByOrganisationAndStateCalls() []struct {
	Ctx context.Context
	Arg database.GetPullRequestsByOrganisationAndStateParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.GetPullRequestsByOrganisationAndStateParams
	}
	mock.lockGetPullRequestsByOrganisationAndState.RLock()
	calls = mock.calls.GetPullRequestsByOrganisationAndState
	mock.lockGetPullRequestsByOrganisationAndState.RUnlock()
	return calls
}

// GetReposByProductID calls GetReposByProductIDFunc.
func (mock *RepoStoreMock) GetReposByProductID(ctx context.Context, productID int64) ([]database.Repository, error) {
	callInfo := struct {
		Ctx       context.Context
		ProductID int64
	}{
		Ctx:       ctx,
		ProductID: productID,
	}
	mock.lockGetReposByProductID.Lock()
	mock.calls.GetReposByProductID = append(mock.calls.GetReposByProductID, callInfo)
	mock.lockGetReposByProductID.Unlock()
	if mock.GetReposByProductIDFunc == nil {
		var (
			repositorysOut []database.Repository
			errOut         error
		)
		return repositorysOut, errOut
	}
	return mock.GetReposByProductIDFunc(ctx, productID)
}

// GetReposByProductIDCalls gets all the calls that were made to GetReposByProductID.
// Check the length with:
//
//	len(mockedRepoStore.GetReposByProductIDCalls())
func (mock *RepoStoreMock) GetReposByProductIDCalls() []struct {
	Ctx       context.Context
	ProductID int64
} {
	var calls []struct {
		Ctx       context.Context
		ProductID int64
	}
	mock.lockGetReposByProductID.RLock()
	calls = mock.calls.GetReposByProductID
	mock.lockGetReposByProductID.RUnlock()
	return calls
}

// GetSecurityByOrganisationAndState calls GetSecurityByOrganisationAndStateFunc.
func (mock *RepoStoreMock) GetSecurityByOrganisationAndState(ctx context.Context, arg database.GetSecurityByOrganisationAndStateParams) ([]database.Security, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.GetSecurityByOrganisationAndStateParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockGetSecurityByOrganisationAndState.Lock()
	mock.calls.GetSecurityByOrganisationAndState = append(mock.calls.GetSecurityByOrganisationAndState, callInfo)
	mock.lockGetSecurityByOrganisationAndState.Unlock()
	if mock.GetSecurityByOrganisationAndStateFunc == nil {
		var (
			securitysOut []database.Security
			errOut       error
		)
		return securitysOut, errOut
	}
	return mock.GetSecurityByOrganisationAndStateFunc(ctx, arg)
}

// GetSecurityByOrganisationAndStateCalls gets all the calls that were made to GetSecurityByOrganisationAndState.
// Check the length with:
//
//	len(mockedRepoStore.GetSecurityByOrganisationAndStateCalls())
func (mock *RepoStoreMock) GetSecurityByOrganisationAndStateCalls() []struct {
	Ctx context.Context
	Arg database.GetSecurityByOrganisationAndStateParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.GetSecurityByOrganisationAndStateParams
	}
	mock.lockGetSecurityByOrganisationAndState.RLock()
	calls = mock.calls.GetSecurityByOrganisationAndState
	mock.lockGetSecurityByOrganisationAndState.RUnlock()
	return calls
}

// GetSecurityByProductIDAndState calls GetSecurityByProductIDAndStateFunc.
func (mock *RepoStoreMock) GetSecurityByProductIDAndState(ctx context.Context, arg database.GetSecurityByProductIDAndStateParams) ([]database.Security, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.GetSecurityByProductIDAndStateParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockGetSecurityByProductIDAndState.Lock()
	mock.calls.GetSecurityByProductIDAndState = append(mock.calls.GetSecurityByProductIDAndState, callInfo)
	mock.lockGetSecurityByProductIDAndState.Unlock()
	if mock.GetSecurityByProductIDAndStateFunc == nil {
		var (
			securitysOut []database.Security
			errOut       error
		)
		return securitysOut, errOut
	}
	return mock.GetSecurityByProductIDAndStateFunc(ctx, arg)
}

// GetSecurityByProductIDAndStateCalls gets all the calls that were made to GetSecurityByProductIDAndState.
// Check the length with:
//
//	len(mockedRepoStore.GetSecurityByProductIDAndStateCalls())
func (mock *RepoStoreMock) GetSecurityByProductIDAndStateCalls() []struct {
	Ctx context.Context
	Arg database.GetSecurityByProductIDAndStateParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.GetSecurityByProductIDAndStateParams
	}
	mock.lockGetSecurityByProductIDAndState.RLock()
	calls = mock.calls.GetSecurityByProductIDAndState
	mock.lockGetSecurityByProductIDAndState.RUnlock()
	return calls
}

// Ensure, that ProductStoreMock does implement ProductStore.
// If this is not the case, regenerate this file with moq.
var _ ProductStore = &ProductStoreMock{}

// ProductStoreMock is a mock implementation of ProductStore.
//
//	func TestSomethingThatUsesProductStore(t *testing.T) {
//
//		// make and configure a mocked ProductStore
//		mockedProductStore := &ProductStoreMock{
//			CreateProductFunc: func(ctx context.Context, arg database.CreateProductParams) (database.Product, error) {
//				panic("mock out the CreateProduct method")
//			},
//			DeleteProductFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteProduct method")
//			},
//			DeletePullRequestsByProductIDFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeletePullRequestsByProductID method")
//			},
//			DeleteReposByProductIDFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteReposByProductID method")
//			},
//			DeleteSecurityByProductIDFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteSecurityByProductID method")
//			},
//			GetProductByIDFunc: func(ctx context.Context, id int64) (database.Product, error) {
//				panic("mock out the GetProductByID method")
//			},
//			ListProductsByOrganisationFunc: func(ctx context.Context, organisationID sql.NullInt64) ([]database.Product, error) {
//				panic("mock out the ListProductsByOrganisation method")
//			},
//			UpdateProductFunc: func(ctx context.Context, arg database.UpdateProductParams) (database.Product, error) {
//				panic("mock out the UpdateProduct method")
//			},
//			UpdateProductSyncFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the UpdateProductSync method")
//			},
//		}
//
//		// use mockedProductStore in code that requires ProductStore
//		// and then make assertions.
//
//	}
type ProductStoreMock struct {
	// CreateProductFunc mocks the CreateProduct method.
	CreateProductFunc func(ctx context.Context, arg database.CreateProductParams) (database.Product, error)

	// DeleteProductFunc mocks the DeleteProduct method.
	DeleteProductFunc func(ctx context.Context, id int64) error

	// DeletePullRequestsByProductIDFunc mocks the DeletePullRequestsByProductID method.
	DeletePullRequestsByProductIDFunc func(ctx context.Context, id int64) error

	// DeleteReposByProductIDFunc mocks the DeleteReposByProductID method.
	DeleteReposByProductIDFunc func(ctx context.Context, id int64) error

	// DeleteSecurityByProductIDFunc mocks the DeleteSecurityByProductID method.
	DeleteSecurityByProductIDFunc func(ctx context.Context, id int64) error

	// GetProductByIDFunc mocks the GetProductByID method.
	GetProductByIDFunc func(ctx context.Context, id int64) (database.Product, error)

	// ListProductsByOrganisationFunc mocks the ListProductsByOrganisation method.
	ListProductsByOrganisationFunc func(ctx context.Context, organisationID sql.NullInt64) ([]database.Product, error)

	// UpdateProductFunc mocks the UpdateProduct method.
	UpdateProductFunc func(ctx context.Context, arg database.UpdateProductParams) (database.Product, error)

	// UpdateProductSyncFunc mocks the UpdateProductSync method.
	UpdateProductSyncFunc func(ctx context.Context, id int64) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateProduct holds details about calls to the CreateProduct method.
		CreateProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.CreateProductParams
		}
		// DeleteProduct holds details about calls to the DeleteProduct method.
		DeleteProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeletePullRequestsByProductID holds details about calls to the DeletePullRequestsByProductID method.
		DeletePullRequestsByProductID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteReposByProductID holds details about calls to the DeleteReposByProductID method.
		DeleteReposByProductID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteSecurityByProductID holds details about calls to the DeleteSecurityByProductID method.
		DeleteSecurityByProductID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetProductByID holds details about calls to the GetProductByID method.
		GetProductByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// ListProductsByOrganisation holds details about calls to the ListProductsByOrganisation method.
		ListProductsByOrganisation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganisationID is the organisationID argument value.
			OrganisationID sql.NullInt64
		}
		// UpdateProduct holds details about calls to the UpdateProduct method.
		UpdateProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.UpdateProductParams
		}
		// UpdateProductSync holds details about calls to the UpdateProductSync method.
		UpdateProductSync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
	lockCreateProduct                 sync.RWMutex
	lockDeleteProduct                 sync.RWMutex
	lockDeletePullRequestsByProductID sync.RWMutex
	lockDeleteReposByProductID        sync.RWMutex
	lockDeleteSecurityByProductID     sync.RWMutex
	lockGetProductByID                sync.RWMutex
	lockListProductsByOrganisation    sync.RWMutex
	lockUpdateProduct                 sync.RWMutex
	lockUpdateProductSync             sync.RWMutex
}

// CreateProduct calls CreateProductFunc.
func (mock *ProductStoreMock) CreateProduct(ctx context.Context, arg database.CreateProductParams) (database.Product, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.CreateProductParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateProduct.Lock()
	mock.calls.CreateProduct = append(mock.calls.CreateProduct, callInfo)
	mock.lockCreateProduct.Unlock()
	if mock.CreateProductFunc == nil {
		var (
			productOut database.Product
			errOut     error
		)
		return productOut, errOut
	}
	return mock.CreateProductFunc(ctx, arg)
}

// CreateProductCalls gets all the calls that were made to CreateProduct.
// Check the length with:
//
//	len(mockedProductStore.CreateProductCalls())
func (mock *ProductStoreMock) CreateProductCalls() []struct {
	Ctx context.Context
	Arg database.CreateProductParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.CreateProductParams
	}
	mock.lockCreateProduct.RLock()
	calls = mock.calls.CreateProduct
	mock.lockCreateProduct.RUnlock()
	return calls
}

// DeleteProduct calls DeleteProductFunc.
func (mock *ProductStoreMock) DeleteProduct(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteProduct.Lock()
	mock.calls.DeleteProduct = append(mock.calls.DeleteProduct, callInfo)
	mock.lockDeleteProduct.Unlock()
	if mock.DeleteProductFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteProductFunc(ctx, id)
}

// DeleteProductCalls gets all the calls that were made to DeleteProduct.
// Check the length with:
//
//	len(mockedProductStore.DeleteProductCalls())
func (mock *ProductStoreMock) DeleteProductCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteProduct.RLock()
	calls = mock.calls.DeleteProduct
	mock.lockDeleteProduct.RUnlock()
	return calls
}

// DeletePullRequestsByProductID calls DeletePullRequestsByProductIDFunc.
func (mock *ProductStoreMock) DeletePullRequestsByProductID(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePullRequestsByProductID.Lock()
	mock.calls.DeletePullRequestsByProductID = append(mock.calls.DeletePullRequestsByProductID, callInfo)
	mock.lockDeletePullRequestsByProductID.Unlock()
	if mock.DeletePullRequestsByProductIDFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeletePullRequestsByProductIDFunc(ctx, id)
}

// DeletePullRequestsByProductIDCalls gets all the calls that were made to DeletePullRequestsByProductID.
// Check the length with:
//
//	len(mockedProductStore.DeletePullRequestsByProductIDCalls())
func (mock *ProductStoreMock) DeletePullRequestsByProductIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeletePullRequestsByProductID.RLock()
	calls = mock.calls.DeletePullRequestsByProductID
	mock.lockDeletePullRequestsByProductID.RUnlock()
	return calls
}

// DeleteReposByProductID calls DeleteReposByProductIDFunc.
func (mock *ProductStoreMock) DeleteReposByProductID(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteReposByProductID.Lock()
	mock.calls.DeleteReposByProductID = append(mock.calls.DeleteReposByProductID, callInfo)
	mock.lockDeleteReposByProductID.Unlock()
	if mock.DeleteReposByProductIDFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteReposByProductIDFunc(ctx, id)
}

// DeleteReposByProductIDCalls gets all the calls that were made to DeleteReposByProductID.
// Check the length with:
//
//	len(mockedProductStore.DeleteReposByProductIDCalls())
func (mock *ProductStoreMock) DeleteReposByProductIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteReposByProductID.RLock()
	calls = mock.calls.DeleteReposByProductID
	mock.lockDeleteReposByProductID.RUnlock()
	return calls
}

// DeleteSecurityByProductID calls DeleteSecurityByProductIDFunc.
func (mock *ProductStoreMock) DeleteSecurityByProductID(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteSecurityByProductID.Lock()
	mock.calls.DeleteSecurityByProductID = append(mock.calls.DeleteSecurityByProductID, callInfo)
	mock.lockDeleteSecurityByProductID.Unlock()
	if mock.DeleteSecurityByProductIDFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteSecurityByProductIDFunc(ctx, id)
}

// DeleteSecurityByProductIDCalls gets all the calls that were made to DeleteSecurityByProductID.
// Check the length with:
//
//	len(mockedProductStore.DeleteSecurityByProductIDCalls())
func (mock *ProductStoreMock) DeleteSecurityByProductIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteSecurityByProductID.RLock()
	calls = mock.calls.DeleteSecurityByProductID
	mock.lockDeleteSecurityByProductID.RUnlock()
	return calls
}

// GetProductByID calls GetProductByIDFunc.
func (mock *ProductStoreMock) GetProductByID(ctx context.Context, id int64) (database.Product, error) {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetProductByID.Lock()
	mock.calls.GetProductByID = append(mock.calls.GetProductByID, callInfo)
	mock.lockGetProductByID.Unlock()
	if mock.GetProductByIDFunc == nil {
		var (
			productOut database.Product
			errOut     error
		)
		return productOut, errOut
	}
	return mock.GetProductByIDFunc(ctx, id)
}

// GetProductByIDCalls gets all the calls that were made to GetProductByID.
// Check the length with:
//
//	len(mockedProductStore.GetProductByIDCalls())
func (mock *ProductStoreMock) GetProductByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetProductByID.RLock()
	calls = mock.calls.GetProductByID
	mock.lockGetProductByID.RUnlock()
	return calls
}

// ListProductsByOrganisation calls ListProductsByOrganisationFunc.
func (mock *ProductStoreMock) ListProductsByOrganisation(ctx context.Context, organisationID sql.NullInt64) ([]database.Product, error) {
	callInfo := struct {
		Ctx            context.Context
		OrganisationID sql.NullInt64
	}{
		Ctx:            ctx,
		OrganisationID: organisationID,
	}
	mock.lockListProductsByOrganisation.Lock()
	mock.calls.ListProductsByOrganisation = append(mock.calls.ListProductsByOrganisation, callInfo)
	mock.lockListProductsByOrganisation.Unlock()
	if mock.ListProductsByOrganisationFunc == nil {
		var (
			productsOut []database.Product
			errOut      error
		)
		return productsOut, errOut
	}
	return mock.ListProductsByOrganisationFunc(ctx, organisationID)
}

// ListProductsByOrganisationCalls gets all the calls that were made to ListProductsByOrganisation.
// Check the length with:
//
//	len(mockedProductStore.ListProductsByOrganisationCalls())
func (mock *ProductStoreMock) ListProductsByOrganisationCalls() []struct {
	Ctx            context.Context
	OrganisationID sql.NullInt64
} {
	var calls []struct {
		Ctx            context.Context
		OrganisationID sql.NullInt64
	}
	mock.lockListProductsByOrganisation.RLock()
	calls = mock.calls.ListProductsByOrganisation
	mock.lockListProductsByOrganisation.RUnlock()
	return calls
}

// UpdateProduct calls UpdateProductFunc.
func (mock *ProductStoreMock) UpdateProduct(ctx context.Context, arg database.UpdateProductParams) (database.Product, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.UpdateProductParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateProduct.Lock()
	mock.calls.UpdateProduct = append(mock.calls.UpdateProduct, callInfo)
	mock.lockUpdateProduct.Unlock()
	if mock.UpdateProductFunc == nil {
		var (
			productOut database.Product
			errOut     error
		)
		return productOut, errOut
	}
	return mock.UpdateProductFunc(ctx, arg)
}

// UpdateProductCalls gets all the calls that were made to UpdateProduct.
// Check the length with:
//
//	len(mockedProductStore.UpdateProductCalls())
func (mock *ProductStoreMock) UpdateProductCalls() []struct {
	Ctx context.Context
	Arg database.UpdateProductParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.UpdateProductParams
	}
	mock.lockUpdateProduct.RLock()
	calls = mock.calls.UpdateProduct
	mock.lockUpdateProduct.RUnlock()
	return calls
}

// UpdateProductSync calls UpdateProductSyncFunc.
func (mock *ProductStoreMock) UpdateProductSync(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockUpdateProductSync.Lock()
	mock.calls.UpdateProductSync = append(mock.calls.UpdateProductSync, callInfo)
	mock.lockUpdateProductSync.Unlock()
	if mock.UpdateProductSyncFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateProductSyncFunc(ctx, id)
}

// UpdateProductSyncCalls gets all the calls that were made to UpdateProductSync.
// Check the length with:
//
//	len(mockedProductStore.UpdateProductSyncCalls())
func (mock *ProductStoreMock) UpdateProductSyncCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockUpdateProductSync.RLock()
	calls = mock.calls.UpdateProductSync
	mock.lockUpdateProductSync.RUnlock()
	return calls
}

// Ensure, that OrgStoreMock does implement OrgStore.
// If this is not the case, regenerate this file with moq.
var _ OrgStore = &OrgStoreMock{}

// OrgStoreMock is a mock implementation of OrgStore.
//
//	func TestSomethingThatUsesOrgStore(t *testing.T) {
//
//		// make and configure a mocked OrgStore
//		mockedOrgStore := &OrgStoreMock{
//			AddProductToOrganisationFunc: func(ctx context.Context, arg database.AddProductToOrganisationParams) error {
//				panic("mock out the AddProductToOrganisation method")
//			},
//			CreateOrganisationFunc: func(ctx context.Context, arg database.CreateOrganisationParams) (database.Organisation, error) {
//				panic("mock out the CreateOrganisation method")
//			},
//			DeleteOrgFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the DeleteOrg method")
//			},
//			DeleteProductOrganisationByOrgIDFunc: func(ctx context.Context, organisationID sql.NullInt64) error {
//				panic("mock out the DeleteProductOrganisationByOrgID method")
//			},
//			GetDefaultOrganisationFunc: func(ctx context.Context) (database.Organisation, error) {
//				panic("mock out the GetDefaultOrganisation method")
//			},
//			GetOrganisationByIDFunc: func(ctx context.Context, id int64) (database.Organisation, error) {
//				panic("mock out the GetOrganisationByID method")
//			},
//			GetOrganisationForProductFunc: func(ctx context.Context, productID sql.NullInt64) (database.Organisation, error) {
//				panic("mock out the GetOrganisationForProduct method")
//			},
//			ListOrganisationsFunc: func(ctx context.Context) ([]database.Organisation, error) {
//				panic("mock out the ListOrganisations method")
//			},
//			ListOrgsOlderThanUpdatedAtFunc: func(ctx context.Context, updatedAt int64) ([]database.Organisation, error) {
//				panic("mock out the ListOrgsOlderThanUpdatedAt method")
//			},
//			SetDefaultOrgFunc: func(ctx context.Context, id int64) (database.Organisation, error) {
//				panic("mock out the SetDefaultOrg method")
//			},
//			SetOrgsDefaultFalseFunc: func(ctx context.Context) error {
//				panic("mock out the SetOrgsDefaultFalse method")
//			},
//			UpdateOrganisationFunc: func(ctx context.Context, arg database.UpdateOrganisationParams) (database.Organisation, error) {
//				panic("mock out the UpdateOrganisation method")
//			},
//			UpdateProductSyncFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the UpdateProductSync method")
//			},
//		}
//
//		// use mockedOrgStore in code that requires OrgStore
//		// and then make assertions.
//
//	}
type OrgStoreMock struct {
	// AddProductToOrganisationFunc mocks the AddProductToOrganisation method.
	AddProductToOrganisationFunc func(ctx context.Context, arg database.AddProductToOrganisationParams) error

	// CreateOrganisationFunc mocks the CreateOrganisation method.
	CreateOrganisationFunc func(ctx context.Context, arg database.CreateOrganisationParams) (database.Organisation, error)

	// DeleteOrgFunc mocks the DeleteOrg method.
	DeleteOrgFunc func(ctx context.Context, id int64) error

	// DeleteProductOrganisationByOrgIDFunc mocks the DeleteProductOrganisationByOrgID method.
	DeleteProductOrganisationByOrgIDFunc func(ctx context.Context, organisationID sql.NullInt64) error

	// GetDefaultOrganisationFunc mocks the GetDefaultOrganisation method.
	GetDefaultOrganisationFunc func(ctx context.Context) (database.Organisation, error)

	// GetOrganisationByIDFunc mocks the GetOrganisationByID method.
	GetOrganisationByIDFunc func(ctx context.Context, id int64) (database.Organisation, error)

	// GetOrganisationForProductFunc mocks the GetOrganisationForProduct method.
	GetOrganisationForProductFunc func(ctx context.Context, productID sql.NullInt64) (database.Organisation, error)

	// ListOrganisationsFunc mocks the ListOrganisations method.
	ListOrganisationsFunc func(ctx context.Context) ([]database.Organisation, error)

	// ListOrgsOlderThanUpdatedAtFunc mocks the ListOrgsOlderThanUpdatedAt method.
	ListOrgsOlderThanUpdatedAtFunc func(ctx context.Context, updatedAt int64) ([]database.Organisation, error)

	// SetDefaultOrgFunc mocks the SetDefaultOrg method.
	SetDefaultOrgFunc func(ctx context.Context, id int64) (database.Organisation, error)

	// SetOrgsDefaultFalseFunc mocks the SetOrgsDefaultFalse method.
	SetOrgsDefaultFalseFunc func(ctx context.Context) error

	// UpdateOrganisationFunc mocks the UpdateOrganisation method.
	UpdateOrganisationFunc func(ctx context.Context, arg database.UpdateOrganisationParams) (database.Organisation, error)

	// UpdateProductSyncFunc mocks the UpdateProductSync method.
	UpdateProductSyncFunc func(ctx context.Context, id int64) error

	// calls tracks calls to the methods.
	calls struct {
		// AddProductToOrganisation holds details about calls to the AddProductToOrganisation method.
		AddProductToOrganisation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.AddProductToOrganisationParams
		}
		// CreateOrganisation holds details about calls to the CreateOrganisation method.
		CreateOrganisation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.CreateOrganisationParams
		}
		// DeleteOrg holds details about calls to the DeleteOrg method.
		DeleteOrg []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// DeleteProductOrganisationByOrgID holds details about calls to the DeleteProductOrganisationByOrgID method.
		DeleteProductOrganisationByOrgID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganisationID is the organisationID argument value.
			OrganisationID sql.NullInt64
		}
		// GetDefaultOrganisation holds details about calls to the GetDefaultOrganisation method.
		GetDefaultOrganisation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetOrganisationByID holds details about calls to the GetOrganisationByID method.
		GetOrganisationByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetOrganisationForProduct holds details about calls to the GetOrganisationForProduct method.
		GetOrganisationForProduct []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProductID is the productID argument value.
			ProductID sql.NullInt64
		}
		// ListOrganisations holds details about calls to the ListOrganisations method.
		ListOrganisations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListOrgsOlderThanUpdatedAt holds details about calls to the ListOrgsOlderThanUpdatedAt method.
		ListOrgsOlderThanUpdatedAt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UpdatedAt is the updatedAt argument value.
			UpdatedAt int64
		}
		// SetDefaultOrg holds details about calls to the SetDefaultOrg method.
		SetDefaultOrg []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// SetOrgsDefaultFalse holds details about calls to the SetOrgsDefaultFalse method.
		SetOrgsDefaultFalse []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UpdateOrganisation holds details about calls to the UpdateOrganisation method.
		UpdateOrganisation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Arg is the arg argument value.
			Arg database.UpdateOrganisationParams
		}
		// UpdateProductSync holds details about calls to the UpdateProductSync method.
		UpdateProductSync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
	}
	lockAddProductToOrganisation         sync.RWMutex
	lockCreateOrganisation               sync.RWMutex
	lockDeleteOrg                        sync.RWMutex
	lockDeleteProductOrganisationByOrgID sync.RWMutex
	lockGetDefaultOrganisation           sync.RWMutex
	lockGetOrganisationByID              sync.RWMutex
	lockGetOrganisationForProduct        sync.RWMutex
	lockListOrganisations                sync.RWMutex
	lockListOrgsOlderThanUpdatedAt       sync.RWMutex
	lockSetDefaultOrg                    sync.RWMutex
	lockSetOrgsDefaultFalse              sync.RWMutex
	lockUpdateOrganisation               sync.RWMutex
	lockUpdateProductSync                sync.RWMutex
}

// AddProductToOrganisation calls AddProductToOrganisationFunc.
func (mock *OrgStoreMock) AddProductToOrganisation(ctx context.Context, arg database.AddProductToOrganisationParams) error {
	callInfo := struct {
		Ctx context.Context
		Arg database.AddProductToOrganisationParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockAddProductToOrganisation.Lock()
	mock.calls.AddProductToOrganisation = append(mock.calls.AddProductToOrganisation, callInfo)
	mock.lockAddProductToOrganisation.Unlock()
	if mock.AddProductToOrganisationFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.AddProductToOrganisationFunc(ctx, arg)
}

// AddProductToOrganisationCalls gets all the calls that were made to AddProductToOrganisation.
// Check the length with:
//
//	len(mockedOrgStore.AddProductToOrganisationCalls())
func (mock *OrgStoreMock) AddProductToOrganisationCalls() []struct {
	Ctx context.Context
	Arg database.AddProductToOrganisationParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.AddProductToOrganisationParams
	}
	mock.lockAddProductToOrganisation.RLock()
	calls = mock.calls.AddProductToOrganisation
	mock.lockAddProductToOrganisation.RUnlock()
	return calls
}

// CreateOrganisation calls CreateOrganisationFunc.
func (mock *OrgStoreMock) CreateOrganisation(ctx context.Context, arg database.CreateOrganisationParams) (database.Organisation, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.CreateOrganisationParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockCreateOrganisation.Lock()
	mock.calls.CreateOrganisation = append(mock.calls.CreateOrganisation, callInfo)
	mock.lockCreateOrganisation.Unlock()
	if mock.CreateOrganisationFunc == nil {
		var (
			organisationOut database.Organisation
			errOut          error
		)
		return organisationOut, errOut
	}
	return mock.CreateOrganisationFunc(ctx, arg)
}

// CreateOrganisationCalls gets all the calls that were made to CreateOrganisation.
// Check the length with:
//
//	len(mockedOrgStore.CreateOrganisationCalls())
func (mock *OrgStoreMock) CreateOrganisationCalls() []struct {
	Ctx context.Context
	Arg database.CreateOrganisationParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.CreateOrganisationParams
	}
	mock.lockCreateOrganisation.RLock()
	calls = mock.calls.CreateOrganisation
	mock.lockCreateOrganisation.RUnlock()
	return calls
}

// DeleteOrg calls DeleteOrgFunc.
func (mock *OrgStoreMock) DeleteOrg(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteOrg.Lock()
	mock.calls.DeleteOrg = append(mock.calls.DeleteOrg, callInfo)
	mock.lockDeleteOrg.Unlock()
	if mock.DeleteOrgFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteOrgFunc(ctx, id)
}

// DeleteOrgCalls gets all the calls that were made to DeleteOrg.
// Check the length with:
//
//	len(mockedOrgStore.DeleteOrgCalls())
func (mock *OrgStoreMock) DeleteOrgCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDeleteOrg.RLock()
	calls = mock.calls.DeleteOrg
	mock.lockDeleteOrg.RUnlock()
	return calls
}

// DeleteProductOrganisationByOrgID calls DeleteProductOrganisationByOrgIDFunc.
func (mock *OrgStoreMock) DeleteProductOrganisationByOrgID(ctx context.Context, organisationID sql.NullInt64) error {
	callInfo := struct {
		Ctx            context.Context
		OrganisationID sql.NullInt64
	}{
		Ctx:            ctx,
		OrganisationID: organisationID,
	}
	mock.lockDeleteProductOrganisationByOrgID.Lock()
	mock.calls.DeleteProductOrganisationByOrgID = append(mock.calls.DeleteProductOrganisationByOrgID, callInfo)
	mock.lockDeleteProductOrganisationByOrgID.Unlock()
	if mock.DeleteProductOrganisationByOrgIDFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DeleteProductOrganisationByOrgIDFunc(ctx, organisationID)
}

// DeleteProductOrganisationByOrgIDCalls gets all the calls that were made to DeleteProductOrganisationByOrgID.
// Check the length with:
//
//	len(mockedOrgStore.DeleteProductOrganisationByOrgIDCalls())
func (mock *OrgStoreMock) DeleteProductOrganisationByOrgIDCalls() []struct {
	Ctx            context.Context
	OrganisationID sql.NullInt64
} {
	var calls []struct {
		Ctx            context.Context
		OrganisationID sql.NullInt64
	}
	mock.lockDeleteProductOrganisationByOrgID.RLock()
	calls = mock.calls.DeleteProductOrganisationByOrgID
	mock.lockDeleteProductOrganisationByOrgID.RUnlock()
	return calls
}

// GetDefaultOrganisation calls GetDefaultOrganisationFunc.
func (mock *OrgStoreMock) GetDefaultOrganisation(ctx context.Context) (database.Organisation, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetDefaultOrganisation.Lock()
	mock.calls.GetDefaultOrganisation = append(mock.calls.GetDefaultOrganisation, callInfo)
	mock.lockGetDefaultOrganisation.Unlock()
	if mock.GetDefaultOrganisationFunc == nil {
		var (
			organisationOut database.Organisation
			errOut          error
		)
		return organisationOut, errOut
	}
	return mock.GetDefaultOrganisationFunc(ctx)
}

// GetDefaultOrganisationCalls gets all the calls that were made to GetDefaultOrganisation.
// Check the length with:
//
//	len(mockedOrgStore.GetDefaultOrganisationCalls())
func (mock *OrgStoreMock) GetDefaultOrganisationCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetDefaultOrganisation.RLock()
	calls = mock.calls.GetDefaultOrganisation
	mock.lockGetDefaultOrganisation.RUnlock()
	return calls
}

// GetOrganisationByID calls GetOrganisationByIDFunc.
func (mock *OrgStoreMock) GetOrganisationByID(ctx context.Context, id int64) (database.Organisation, error) {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetOrganisationByID.Lock()
	mock.calls.GetOrganisationByID = append(mock.calls.GetOrganisationByID, callInfo)
	mock.lockGetOrganisationByID.Unlock()
	if mock.GetOrganisationByIDFunc == nil {
		var (
			organisationOut database.Organisation
			errOut          error
		)
		return organisationOut, errOut
	}
	return mock.GetOrganisationByIDFunc(ctx, id)
}

// GetOrganisationByIDCalls gets all the calls that were made to GetOrganisationByID.
// Check the length with:
//
//	len(mockedOrgStore.GetOrganisationByIDCalls())
func (mock *OrgStoreMock) GetOrganisationByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetOrganisationByID.RLock()
	calls = mock.calls.GetOrganisationByID
	mock.lockGetOrganisationByID.RUnlock()
	return calls
}

// GetOrganisationForProduct calls GetOrganisationForProductFunc.
func (mock *OrgStoreMock) GetOrganisationForProduct(ctx context.Context, productID sql.NullInt64) (database.Organisation, error) {
	callInfo := struct {
		Ctx       context.Context
		ProductID sql.NullInt64
	}{
		Ctx:       ctx,
		ProductID: productID,
	}
	mock.lockGetOrganisationForProduct.Lock()
	mock.calls.GetOrganisationForProduct = append(mock.calls.GetOrganisationForProduct, callInfo)
	mock.lockGetOrganisationForProduct.Unlock()
	if mock.GetOrganisationForProductFunc == nil {
		var (
			organisationOut database.Organisation
			errOut          error
		)
		return organisationOut, errOut
	}
	return mock.GetOrganisationForProductFunc(ctx, productID)
}

// GetOrganisationForProductCalls gets all the calls that were made to GetOrganisationForProduct.
// Check the length with:
//
//	len(mockedOrgStore.GetOrganisationForProductCalls())
func (mock *OrgStoreMock) GetOrganisationForProductCalls() []struct {
	Ctx       context.Context
	ProductID sql.NullInt64
} {
	var calls []struct {
		Ctx       context.Context
		ProductID sql.NullInt64
	}
	mock.lockGetOrganisationForProduct.RLock()
	calls = mock.calls.GetOrganisationForProduct
	mock.lockGetOrganisationForProduct.RUnlock()
	return calls
}

// ListOrganisations calls ListOrganisationsFunc.
func (mock *OrgStoreMock) ListOrganisations(ctx context.Context) ([]database.Organisation, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListOrganisations.Lock()
	mock.calls.ListOrganisations = append(mock.calls.ListOrganisations, callInfo)
	mock.lockListOrganisations.Unlock()
	if mock.ListOrganisationsFunc == nil {
		var (
			organisationsOut []database.Organisation
			errOut           error
		)
		return organisationsOut, errOut
	}
	return mock.ListOrganisationsFunc(ctx)
}

// ListOrganisationsCalls gets all the calls that were made to ListOrganisations.
// Check the length with:
//
//	len(mockedOrgStore.ListOrganisationsCalls())
func (mock *OrgStoreMock) ListOrganisationsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListOrganisations.RLock()
	calls = mock.calls.ListOrganisations
	mock.lockListOrganisations.RUnlock()
	return calls
}

// ListOrgsOlderThanUpdatedAt calls ListOrgsOlderThanUpdatedAtFunc.
func (mock *OrgStoreMock) ListOrgsOlderThanUpdatedAt(ctx context.Context, updatedAt int64) ([]database.Organisation, error) {
	callInfo := struct {
		Ctx       context.Context
		UpdatedAt int64
	}{
		Ctx:       ctx,
		UpdatedAt: updatedAt,
	}
	mock.lockListOrgsOlderThanUpdatedAt.Lock()
	mock.calls.ListOrgsOlderThanUpdatedAt = append(mock.calls.ListOrgsOlderThanUpdatedAt, callInfo)
	mock.lockListOrgsOlderThanUpdatedAt.Unlock()
	if mock.ListOrgsOlderThanUpdatedAtFunc == nil {
		var (
			organisationsOut []database.Organisation
			errOut           error
		)
		return organisationsOut, errOut
	}
	return mock.ListOrgsOlderThanUpdatedAtFunc(ctx, updatedAt)
}

// ListOrgsOlderThanUpdatedAtCalls gets all the calls that were made to ListOrgsOlderThanUpdatedAt.
// Check the length with:
//
//	len(mockedOrgStore.ListOrgsOlderThanUpdatedAtCalls())
func (mock *OrgStoreMock) ListOrgsOlderThanUpdatedAtCalls() []struct {
	Ctx       context.Context
	UpdatedAt int64
} {
	var calls []struct {
		Ctx       context.Context
		UpdatedAt int64
	}
	mock.lockListOrgsOlderThanUpdatedAt.RLock()
	calls = mock.calls.ListOrgsOlderThanUpdatedAt
	mock.lockListOrgsOlderThanUpdatedAt.RUnlock()
	return calls
}

// SetDefaultOrg calls SetDefaultOrgFunc.
func (mock *OrgStoreMock) SetDefaultOrg(ctx context.Context, id int64) (database.Organisation, error) {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockSetDefaultOrg.Lock()
	mock.calls.SetDefaultOrg = append(mock.calls.SetDefaultOrg, callInfo)
	mock.lockSetDefaultOrg.Unlock()
	if mock.SetDefaultOrgFunc == nil {
		var (
			organisationOut database.Organisation
			errOut          error
		)
		return organisationOut, errOut
	}
	return mock.SetDefaultOrgFunc(ctx, id)
}

// SetDefaultOrgCalls gets all the calls that were made to SetDefaultOrg.
// Check the length with:
//
//	len(mockedOrgStore.SetDefaultOrgCalls())
func (mock *OrgStoreMock) SetDefaultOrgCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockSetDefaultOrg.RLock()
	calls = mock.calls.SetDefaultOrg
	mock.lockSetDefaultOrg.RUnlock()
	return calls
}

// SetOrgsDefaultFalse calls SetOrgsDefaultFalseFunc.
func (mock *OrgStoreMock) SetOrgsDefaultFalse(ctx context.Context) error {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockSetOrgsDefaultFalse.Lock()
	mock.calls.SetOrgsDefaultFalse = append(mock.calls.SetOrgsDefaultFalse, callInfo)
	mock.lockSetOrgsDefaultFalse.Unlock()
	if mock.SetOrgsDefaultFalseFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SetOrgsDefaultFalseFunc(ctx)
}

// SetOrgsDefaultFalseCalls gets all the calls that were made to SetOrgsDefaultFalse.
// Check the length with:
//
//	len(mockedOrgStore.SetOrgsDefaultFalseCalls())
func (mock *OrgStoreMock) SetOrgsDefaultFalseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockSetOrgsDefaultFalse.RLock()
	calls = mock.calls.SetOrgsDefaultFalse
	mock.lockSetOrgsDefaultFalse.RUnlock()
	return calls
}

// UpdateOrganisation calls UpdateOrganisationFunc.
func (mock *OrgStoreMock) UpdateOrganisation(ctx context.Context, arg database.UpdateOrganisationParams) (database.Organisation, error) {
	callInfo := struct {
		Ctx context.Context
		Arg database.UpdateOrganisationParams
	}{
		Ctx: ctx,
		Arg: arg,
	}
	mock.lockUpdateOrganisation.Lock()
	mock.calls.UpdateOrganisation = append(mock.calls.UpdateOrganisation, callInfo)
	mock.lockUpdateOrganisation.Unlock()
	if mock.UpdateOrganisationFunc == nil {
		var (
			organisationOut database.Organisation
			errOut          error
		)
		return organisationOut, errOut
	}
	return mock.UpdateOrganisationFunc(ctx, arg)
}

// UpdateOrganisationCalls gets all the calls that were made to UpdateOrganisation.
// Check the length with:
//
//	len(mockedOrgStore.UpdateOrganisationCalls())
func (mock *OrgStoreMock) UpdateOrganisationCalls() []struct {
	Ctx context.Context
	Arg database.UpdateOrganisationParams
} {
	var calls []struct {
		Ctx context.Context
		Arg database.UpdateOrganisationParams
	}
	mock.lockUpdateOrganisation.RLock()
	calls = mock.calls.UpdateOrganisation
	mock.lockUpdateOrganisation.RUnlock()
	return calls
}

// UpdateProductSync calls UpdateProductSyncFunc.
func (mock *OrgStoreMock) UpdateProductSync(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockUpdateProductSync.Lock()
	mock.calls.UpdateProductSync = append(mock.calls.UpdateProductSync, callInfo)
	mock.lockUpdateProductSync.Unlock()
	if mock.UpdateProductSyncFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateProductSyncFunc(ctx, id)
}

// UpdateProductSyncCalls gets all the calls that were made to UpdateProductSync.
// Check the length with:
//
//	len(mockedOrgStore.UpdateProductSyncCalls())
func (mock *OrgStoreMock) UpdateProductSyncCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockUpdateProductSync.RLock()
	calls = mock.calls.UpdateProductSync
	mock.lockUpdateProductSync.RUnlock()
	return calls
}
