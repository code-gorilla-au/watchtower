// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"context"
	"database/sql"
	"sync"
)

// Ensure, that DBTxnerMock does implement DBTxner.
// If this is not the case, regenerate this file with moq.
var _ DBTxner = &DBTxnerMock{}

// DBTxnerMock is a mock implementation of DBTxner.
//
//	func TestSomethingThatUsesDBTxner(t *testing.T) {
//
//		// make and configure a mocked DBTxner
//		mockedDBTxner := &DBTxnerMock{
//			BeginFunc: func() (*sql.Tx, error) {
//				panic("mock out the Begin method")
//			},
//			CommitFunc: func(ctx context.Context) error {
//				panic("mock out the Commit method")
//			},
//			ExecContextFunc: func(contextMoqParam context.Context, s string, ifaceVals ...interface{}) (sql.Result, error) {
//				panic("mock out the ExecContext method")
//			},
//			PrepareContextFunc: func(contextMoqParam context.Context, s string) (*sql.Stmt, error) {
//				panic("mock out the PrepareContext method")
//			},
//			QueryContextFunc: func(contextMoqParam context.Context, s string, ifaceVals ...interface{}) (*sql.Rows, error) {
//				panic("mock out the QueryContext method")
//			},
//			QueryRowContextFunc: func(contextMoqParam context.Context, s string, ifaceVals ...interface{}) *sql.Row {
//				panic("mock out the QueryRowContext method")
//			},
//			RollbackFunc: func(ctx context.Context) error {
//				panic("mock out the Rollback method")
//			},
//		}
//
//		// use mockedDBTxner in code that requires DBTxner
//		// and then make assertions.
//
//	}
type DBTxnerMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() (*sql.Tx, error)

	// CommitFunc mocks the Commit method.
	CommitFunc func(ctx context.Context) error

	// ExecContextFunc mocks the ExecContext method.
	ExecContextFunc func(contextMoqParam context.Context, s string, ifaceVals ...interface{}) (sql.Result, error)

	// PrepareContextFunc mocks the PrepareContext method.
	PrepareContextFunc func(contextMoqParam context.Context, s string) (*sql.Stmt, error)

	// QueryContextFunc mocks the QueryContext method.
	QueryContextFunc func(contextMoqParam context.Context, s string, ifaceVals ...interface{}) (*sql.Rows, error)

	// QueryRowContextFunc mocks the QueryRowContext method.
	QueryRowContextFunc func(contextMoqParam context.Context, s string, ifaceVals ...interface{}) *sql.Row

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ExecContext holds details about calls to the ExecContext method.
		ExecContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// PrepareContext holds details about calls to the PrepareContext method.
		PrepareContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// QueryContext holds details about calls to the QueryContext method.
		QueryContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// QueryRowContext holds details about calls to the QueryRowContext method.
		QueryRowContext []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
			// IfaceVals is the ifaceVals argument value.
			IfaceVals []interface{}
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockBegin           sync.RWMutex
	lockCommit          sync.RWMutex
	lockExecContext     sync.RWMutex
	lockPrepareContext  sync.RWMutex
	lockQueryContext    sync.RWMutex
	lockQueryRowContext sync.RWMutex
	lockRollback        sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *DBTxnerMock) Begin() (*sql.Tx, error) {
	callInfo := struct {
	}{}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	if mock.BeginFunc == nil {
		var (
			txOut  *sql.Tx
			errOut error
		)
		return txOut, errOut
	}
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedDBTxner.BeginCalls())
func (mock *DBTxnerMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Commit calls CommitFunc.
func (mock *DBTxnerMock) Commit(ctx context.Context) error {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	if mock.CommitFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CommitFunc(ctx)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedDBTxner.CommitCalls())
func (mock *DBTxnerMock) CommitCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// ExecContext calls ExecContextFunc.
func (mock *DBTxnerMock) ExecContext(contextMoqParam context.Context, s string, ifaceVals ...interface{}) (sql.Result, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		IfaceVals       []interface{}
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		IfaceVals:       ifaceVals,
	}
	mock.lockExecContext.Lock()
	mock.calls.ExecContext = append(mock.calls.ExecContext, callInfo)
	mock.lockExecContext.Unlock()
	if mock.ExecContextFunc == nil {
		var (
			resultOut sql.Result
			errOut    error
		)
		return resultOut, errOut
	}
	return mock.ExecContextFunc(contextMoqParam, s, ifaceVals...)
}

// ExecContextCalls gets all the calls that were made to ExecContext.
// Check the length with:
//
//	len(mockedDBTxner.ExecContextCalls())
func (mock *DBTxnerMock) ExecContextCalls() []struct {
	ContextMoqParam context.Context
	S               string
	IfaceVals       []interface{}
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		IfaceVals       []interface{}
	}
	mock.lockExecContext.RLock()
	calls = mock.calls.ExecContext
	mock.lockExecContext.RUnlock()
	return calls
}

// PrepareContext calls PrepareContextFunc.
func (mock *DBTxnerMock) PrepareContext(contextMoqParam context.Context, s string) (*sql.Stmt, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockPrepareContext.Lock()
	mock.calls.PrepareContext = append(mock.calls.PrepareContext, callInfo)
	mock.lockPrepareContext.Unlock()
	if mock.PrepareContextFunc == nil {
		var (
			stmtOut *sql.Stmt
			errOut  error
		)
		return stmtOut, errOut
	}
	return mock.PrepareContextFunc(contextMoqParam, s)
}

// PrepareContextCalls gets all the calls that were made to PrepareContext.
// Check the length with:
//
//	len(mockedDBTxner.PrepareContextCalls())
func (mock *DBTxnerMock) PrepareContextCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockPrepareContext.RLock()
	calls = mock.calls.PrepareContext
	mock.lockPrepareContext.RUnlock()
	return calls
}

// QueryContext calls QueryContextFunc.
func (mock *DBTxnerMock) QueryContext(contextMoqParam context.Context, s string, ifaceVals ...interface{}) (*sql.Rows, error) {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		IfaceVals       []interface{}
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		IfaceVals:       ifaceVals,
	}
	mock.lockQueryContext.Lock()
	mock.calls.QueryContext = append(mock.calls.QueryContext, callInfo)
	mock.lockQueryContext.Unlock()
	if mock.QueryContextFunc == nil {
		var (
			rowsOut *sql.Rows
			errOut  error
		)
		return rowsOut, errOut
	}
	return mock.QueryContextFunc(contextMoqParam, s, ifaceVals...)
}

// QueryContextCalls gets all the calls that were made to QueryContext.
// Check the length with:
//
//	len(mockedDBTxner.QueryContextCalls())
func (mock *DBTxnerMock) QueryContextCalls() []struct {
	ContextMoqParam context.Context
	S               string
	IfaceVals       []interface{}
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		IfaceVals       []interface{}
	}
	mock.lockQueryContext.RLock()
	calls = mock.calls.QueryContext
	mock.lockQueryContext.RUnlock()
	return calls
}

// QueryRowContext calls QueryRowContextFunc.
func (mock *DBTxnerMock) QueryRowContext(contextMoqParam context.Context, s string, ifaceVals ...interface{}) *sql.Row {
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
		IfaceVals       []interface{}
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
		IfaceVals:       ifaceVals,
	}
	mock.lockQueryRowContext.Lock()
	mock.calls.QueryRowContext = append(mock.calls.QueryRowContext, callInfo)
	mock.lockQueryRowContext.Unlock()
	if mock.QueryRowContextFunc == nil {
		var (
			rowOut *sql.Row
		)
		return rowOut
	}
	return mock.QueryRowContextFunc(contextMoqParam, s, ifaceVals...)
}

// QueryRowContextCalls gets all the calls that were made to QueryRowContext.
// Check the length with:
//
//	len(mockedDBTxner.QueryRowContextCalls())
func (mock *DBTxnerMock) QueryRowContextCalls() []struct {
	ContextMoqParam context.Context
	S               string
	IfaceVals       []interface{}
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
		IfaceVals       []interface{}
	}
	mock.lockQueryRowContext.RLock()
	calls = mock.calls.QueryRowContext
	mock.lockQueryRowContext.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *DBTxnerMock) Rollback(ctx context.Context) error {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	if mock.RollbackFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RollbackFunc(ctx)
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedDBTxner.RollbackCalls())
func (mock *DBTxnerMock) RollbackCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}

// Ensure, that DBBeginnerMock does implement DBBeginner.
// If this is not the case, regenerate this file with moq.
var _ DBBeginner = &DBBeginnerMock{}

// DBBeginnerMock is a mock implementation of DBBeginner.
//
//	func TestSomethingThatUsesDBBeginner(t *testing.T) {
//
//		// make and configure a mocked DBBeginner
//		mockedDBBeginner := &DBBeginnerMock{
//			BeginFunc: func() (*sql.Tx, error) {
//				panic("mock out the Begin method")
//			},
//		}
//
//		// use mockedDBBeginner in code that requires DBBeginner
//		// and then make assertions.
//
//	}
type DBBeginnerMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func() (*sql.Tx, error)

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
		}
	}
	lockBegin sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *DBBeginnerMock) Begin() (*sql.Tx, error) {
	callInfo := struct {
	}{}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	if mock.BeginFunc == nil {
		var (
			txOut  *sql.Tx
			errOut error
		)
		return txOut, errOut
	}
	return mock.BeginFunc()
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedDBBeginner.BeginCalls())
func (mock *DBBeginnerMock) BeginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}
