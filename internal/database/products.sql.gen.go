// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
)

const addProductToOrganisation = `-- name: AddProductToOrganisation :exec
INSERT INTO product_organisations (product_id,
                                   organisation_id)
VALUES (?,
        ?)
`

type AddProductToOrganisationParams struct {
	ProductID      sql.NullInt64
	OrganisationID sql.NullInt64
}

func (q *Queries) AddProductToOrganisation(ctx context.Context, arg AddProductToOrganisationParams) error {
	_, err := q.db.ExecContext(ctx, addProductToOrganisation, arg.ProductID, arg.OrganisationID)
	return err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name,
                      tags,
                      created_at,
                      updated_at)
VALUES (?,
        ?,
        CAST(strftime('%s', 'now') AS INTEGER),
        CAST(strftime('%s', 'now') AS INTEGER))
ON CONFLICT (name) DO UPDATE SET
    name = excluded.name,
    tags = excluded.tags,
    updated_at = CAST(strftime('%s', 'now') AS INTEGER)
RETURNING id, name, description, tags, created_at, updated_at
`

type CreateProductParams struct {
	Name string
	Tags sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Tags)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRepo = `-- name: CreateRepo :one
INSERT INTO repositories (name,
                          url,
                          topic,
                          owner,
                          created_at,
                          updated_at)
VALUES (?,
        ?,
        ?,
        ?,
        CAST(strftime('%s', 'now') AS INTEGER),
        CAST(strftime('%s', 'now') AS INTEGER))
ON CONFLICT (name) DO UPDATE SET
    name = excluded.name,
    url = excluded.url,
    topic = excluded.topic,
    owner = excluded.owner,
    updated_at = CAST(strftime('%s', 'now') AS INTEGER)
RETURNING id, name, url, topic, owner, created_at, updated_at
`

type CreateRepoParams struct {
	Name  string
	Url   string
	Topic string
	Owner string
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (Repository, error) {
	row := q.db.QueryRowContext(ctx, createRepo,
		arg.Name,
		arg.Url,
		arg.Topic,
		arg.Owner,
	)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Topic,
		&i.Owner,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products where id = ?
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getOrganisationForProduct = `-- name: GetOrganisationForProduct :one
SELECT product_id, organisation_id, id, friendly_name, description, namespace, default_org, token, created_at, updated_at
FROM product_organisations po
         JOIN organisations o ON o.id = po.organisation_id
WHERE po.product_id = ?
LIMIT 1
`

type GetOrganisationForProductRow struct {
	ProductID      sql.NullInt64
	OrganisationID sql.NullInt64
	ID             int64
	FriendlyName   string
	Description    string
	Namespace      string
	DefaultOrg     bool
	Token          string
	CreatedAt      int64
	UpdatedAt      int64
}

func (q *Queries) GetOrganisationForProduct(ctx context.Context, productID sql.NullInt64) (GetOrganisationForProductRow, error) {
	row := q.db.QueryRowContext(ctx, getOrganisationForProduct, productID)
	var i GetOrganisationForProductRow
	err := row.Scan(
		&i.ProductID,
		&i.OrganisationID,
		&i.ID,
		&i.FriendlyName,
		&i.Description,
		&i.Namespace,
		&i.DefaultOrg,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, tags, created_at, updated_at
FROM products
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReposByProductID = `-- name: GetReposByProductID :many
SELECT r.id, r.name, r.url, r.topic, r.owner, r.created_at, r.updated_at
FROM repositories r
JOIN products p ON p.id = ? 
    AND JSON_VALID(p.tags) 
    AND EXISTS (
        SELECT 1 
        FROM JSON_EACH(p.tags) 
        WHERE JSON_EACH.value = r.topic
    )
`

func (q *Queries) GetReposByProductID(ctx context.Context, id int64) ([]Repository, error) {
	rows, err := q.db.QueryContext(ctx, getReposByProductID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repository
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Topic,
			&i.Owner,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByOrganisation = `-- name: ListProductsByOrganisation :many
SELECT p.id, p.name, p.description, p.tags, p.created_at, p.updated_at
FROM products p
         JOIN product_organisations po ON po.product_id = p.id
WHERE po.organisation_id = ?
ORDER BY p.name
`

func (q *Queries) ListProductsByOrganisation(ctx context.Context, organisationID sql.NullInt64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByOrganisation, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name       = ?,
    tags       = ?,
    updated_at = CAST(strftime('%s', 'now') AS INTEGER)
WHERE id = ?
`

type UpdateProductParams struct {
	Name string
	Tags sql.NullString
	ID   int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct, arg.Name, arg.Tags, arg.ID)
	return err
}
