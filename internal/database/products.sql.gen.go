// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
)

const addProductToOrganisation = `-- name: AddProductToOrganisation :exec
INSERT INTO product_organisations (
  product_id,
  organisation_id
) VALUES (
  ?,
  ?
)
`

type AddProductToOrganisationParams struct {
	ProductID      sql.NullInt64
	OrganisationID sql.NullInt64
}

func (q *Queries) AddProductToOrganisation(ctx context.Context, arg AddProductToOrganisationParams) error {
	_, err := q.db.ExecContext(ctx, addProductToOrganisation, arg.ProductID, arg.OrganisationID)
	return err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  name,
  tags,
  created_at,
  updated_at
) VALUES (
  ?,
  ?,
  CAST(strftime('%s','now') AS INTEGER),
  CAST(strftime('%s','now') AS INTEGER)
)
RETURNING id, name, tags, created_at, updated_at
`

type CreateProductParams struct {
	Name string
	Tags sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Tags)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, tags, created_at, updated_at
FROM products
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tags,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProductsByOrganisation = `-- name: ListProductsByOrganisation :many
SELECT p.id, p.name, p.tags, p.created_at, p.updated_at
FROM products p
JOIN product_organisations po ON po.product_id = p.id
WHERE po.organisation_id = ?
ORDER BY p.name
`

func (q *Queries) ListProductsByOrganisation(ctx context.Context, organisationID sql.NullInt64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByOrganisation, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tags,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET
  name = ?,
  tags = ?,
  updated_at = CAST(strftime('%s','now') AS INTEGER)
WHERE id = ?
`

type UpdateProductParams struct {
	Name string
	Tags sql.NullString
	ID   int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct, arg.Name, arg.Tags, arg.ID)
	return err
}
