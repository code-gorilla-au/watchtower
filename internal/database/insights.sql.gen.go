// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: insights.sql

package database

import (
	"context"
)

const getPullRequestInsights = `-- name: GetPullRequestInsights :one
WITH average_days_to_merge AS (
    SELECT ROUND((merged_at - created_at) / 86400.0, 2) AS avg_days_to_merge
    FROM pull_requests
    WHERE state = 'MERGED'
      AND created_at >= strftime('%s', 'now', '-90 days')
)
SELECT
    ROUND(MIN(avg_days_to_merge),2) AS min_days_to_merge,
    ROUND(MAX(avg_days_to_merge),2) AS max_days_to_merge,
    ROUND(AVG(avg_days_to_merge),2) AS avg_days_to_merge
FROM average_days_to_merge
`

type GetPullRequestInsightsRow struct {
	MinDaysToMerge float64
	MaxDaysToMerge float64
	AvgDaysToMerge float64
}

func (q *Queries) GetPullRequestInsights(ctx context.Context) (GetPullRequestInsightsRow, error) {
	row := q.db.QueryRowContext(ctx, getPullRequestInsights)
	var i GetPullRequestInsightsRow
	err := row.Scan(&i.MinDaysToMerge, &i.MaxDaysToMerge, &i.AvgDaysToMerge)
	return i, err
}

const getSecuritiesInsights = `-- name: GetSecuritiesInsights :one
WITH average_days_to_fix AS (
    SELECT ROUND((fixed_at - created_at) / 86400, 2) as days_to_fix
    FROM securities
    WHERE state = 'FIXED'
      AND fixed_at IS NOT NULL
      AND created_at >= strftime('%s', 'now', '-90 days')
)
SELECT
    ROUND(MIN(days_to_fix), 2) AS min_days_to_fix,
    ROUND(MAX(days_to_fix), 2) AS max_days_to_fix,
    ROUND(AVG(days_to_fix), 2) AS avg_days_to_fix
FROM average_days_to_fix
`

type GetSecuritiesInsightsRow struct {
	MinDaysToFix float64
	MaxDaysToFix float64
	AvgDaysToFix float64
}

func (q *Queries) GetSecuritiesInsights(ctx context.Context) (GetSecuritiesInsightsRow, error) {
	row := q.db.QueryRowContext(ctx, getSecuritiesInsights)
	var i GetSecuritiesInsightsRow
	err := row.Scan(&i.MinDaysToFix, &i.MaxDaysToFix, &i.AvgDaysToFix)
	return i, err
}
